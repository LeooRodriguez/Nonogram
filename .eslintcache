[{"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\index.js":"1","C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Game.js":"2","C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\PengineClient.js":"3","C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Board.js":"4","C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Square.js":"5","C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Clue.js":"6","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\index.js":"7","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Game.js":"8","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\PengineClient.js":"9","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Board.js":"10","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Square.js":"11","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Clue.js":"12"},{"size":177,"mtime":1619825084000,"results":"13","hashOfConfig":"14"},{"size":5755,"mtime":1621398247140,"results":"15","hashOfConfig":"14"},{"size":2201,"mtime":1619825084000,"results":"16","hashOfConfig":"14"},{"size":3787,"mtime":1621398099609,"results":"17","hashOfConfig":"14"},{"size":450,"mtime":1621398387789,"results":"18","hashOfConfig":"14"},{"size":468,"mtime":1621186505879,"results":"19","hashOfConfig":"14"},{"size":177,"mtime":1621398463000,"results":"20","hashOfConfig":"21"},{"size":5854,"mtime":1621475653773,"results":"22","hashOfConfig":"21"},{"size":2201,"mtime":1621398463000,"results":"23","hashOfConfig":"21"},{"size":3701,"mtime":1621398463000,"results":"24","hashOfConfig":"21"},{"size":436,"mtime":1621398463000,"results":"25","hashOfConfig":"21"},{"size":450,"mtime":1621473646410,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tz9p3y",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1dyav70",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"49","usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\index.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Game.js",["54","55"],"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\PengineClient.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Board.js",["56","57"],"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Square.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Logica-P1\\src\\Clue.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\index.js",[],["58","59"],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Game.js",["60","61"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\n\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.restart(true)\r\n  }\r\n\r\n\r\n\r\n  handlePengineCreate() {\r\n    const queryS = 'init(PistasFilas, PistasColumns, Grilla)';\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grilla'],\r\n          rowClues: response['PistasFilas'],\r\n          colClues: response['PistasColumns'],\r\n          satisfaccionFil : Array(response['PistasFilas'].length).fill(false), //inicializamos la fila para verificar en falso\r\n          satisfaccionCol : Array(response['PistasColumns'].length).fill(false) //inicializamos la columna para verificar en falso\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleClick(i, j) {\r\n    // No action on click if we are waiting.\r\n    if (this.state.waiting) {\r\n      return;\r\n    }\r\n    // Build Prolog query to make the move, which will look as follows:\r\n    // put(\"#\",[0,1],[], [],[[\"X\",_,_,_,_],[\"X\",_,\"X\",_,_],[\"X\",_,_,_,_],[\"#\",\"#\",\"#\",_,_],[_,_,\"#\",\"#\",\"#\"]], GrillaRes, FilaSat, ColSat)\r\n    const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\"); // Remove quotes for variables.\r\n    const modo= this.state.modoBoton;\r\n    const rowClue= JSON.stringify(this.state.rowClues);\r\n    const colClue= JSON.stringify(this.state.colClues);\r\n    const queryS = 'put(\"'+modo+'\", [' + i + ',' + j + ']' + ', '+rowClue+', '+colClue+',' + squaresS + ', GrillaRes, FilaSat, ColSat)';\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        let newGrid= response['GrillaRes'];\r\n        let satisfaceFil = response['FilaSat'];\r\n        let satisfaceCol = response['ColSat'];\r\n        this.setState({\r\n          grid: newGrid,\r\n          satisfaceF: satisfaceFil,\r\n          satisfaceC: satisfaceCol\r\n        });\r\n        this.confirmarFilaSatisfecha(i,satisfaceFil===1);\r\n        this.confirmarColSatisfecha(j,satisfaceCol===1);\r\n      } else {\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n /**\r\n  * Verifica si la columna con el indice index verifica la propiedad.\r\n  * @param {*} index es el indice de la columna que deseamos verificar \r\n  * @param {*} satisface indica si se satisfacio la columna \r\n  */\r\n\r\n  confirmarColSatisfecha(index,satisface){\r\n    let satisfaccionCol= [...this.state.satisfaccionCol];\r\n    satisfaccionCol[index]=satisface;\r\n    this.setState({satisfaccionCol,waiting:false});\r\n  }\r\n\r\n/**\r\n * Verifica si la fila con el indice index verifica la propiedad.\r\n * @param {*} index es el indice de la fila que deseamos verificar \r\n * @param {*} satisface indica si se satisfacio la fila\r\n */\r\n\r\nconfirmarFilaSatisfecha(index,satisface){\r\n  let satisfaccionFil= [...this.state.satisfaccionFil];\r\n  satisfaccionFil[index]=satisface;\r\n  this.setState({satisfaccionFil,waiting:false});\r\n}\r\n/**\r\n * Cambia el estado del boton, alternando entre el # y la X según cual sea su estado actual.\r\n */\r\ncambiar(){\r\n  if(this.state.modoBoton===\"#\"){\r\n    this.setState({modoBoton: \"X\"})\r\n  }\r\n  else\r\n    this.setState({modoBoton: \"#\"})\r\n}\r\n\r\nabrirManual(){\r\n  window.open(\"https://dunialm.files.wordpress.com/2011/12/reglas-de-los-nonogramas.pdf\", \"Manual de usuario / Tutorial\", \"width=800, height=700\")\r\n}\r\nirGithub(){\r\n  window.open(\"https://github.com/LeooRodriguez/Nonogram\", \"GitHub\", \"width=800, height=700\")\r\n}\r\n\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n\r\n\r\n\r\n    let {satisfaccionFil, satisfaccionCol} = this.state;\r\n\r\n    if(satisfaccionFil.every(a=>a) && satisfaccionCol.every(a=>a)){//Si todas las filas y columnas de la grilla son true --> ganaste el juego.\r\n      return <div>\r\n        <div className={\"cartelGanaste\"}>¡FELICIDADES,HAS GANADO!</div>\r\n\r\n        <button className={\"botonDeReset\"} onClick={()=>this.restart()}>\r\n        Pulse para comenzar otra partida \r\n        </button>\r\n\r\n        <button className={\"botonDeGit\"} onClick={()=>this.irGithub()}>\r\n        GitHub\r\n        </button>\r\n      </div>\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <Board\r\n          grid={this.state.grid}\r\n          rowClues={this.state.rowClues}\r\n          colClues={this.state.colClues}\r\n          onClick={(i, j) => this.handleClick(i,j)}\r\n          satisfaccionFil={this.state.satisfaccionFil}\r\n          satisfaccionCol={this.state.satisfaccionCol}\r\n        />\r\n        \r\n        <button className=\"box clue nsat\" onClick={()=>this.cambiar()} >\r\n          {this.state.modoBoton}\r\n      </button>\r\n      <div>\r\n        <div className={\"cartelNombre\"}>Nonograma\r\n        </div>\r\n        <div>\r\n        <div className={\"Estado\"}>Modo:\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <button className={\"botonReglas\"}onClick={()=>this.abrirManual()}>\r\n        Reglas \r\n        </button>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n  restart(isFirstTime = false) {\r\n    this.state = {\r\n      grid: null,\r\n      rowClues: null,\r\n      colClues: null,\r\n      waiting: false,\r\n      satisfaceF: true,\r\n      satisfaceC: true,\r\n      satisfaccionFil: [],//Guarda verdaderos o falsos dependiendo si la filas cumple las propiedades del nonograma. \r\n      satisfaccionCol: [],//Guarda verdaderos o falsos dependiendo si la columnas cumple las propiedades del nonograma.\r\n      modoBoton: \"#\",\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    if(isFirstTime){\r\n      this.pengine = new PengineClient(this.handlePengineCreate);\r\n    }\r\n    else{\r\n      this.handlePengineCreate()//Inicia una nueva partida ya mismo.\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Game;\r\n\r\n\r\n","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\PengineClient.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Board.js",["62","63"],"import React from 'react';\nimport Square from './Square';\nimport Clue from './Clue';\n\nclass Board extends React.Component {\n    /**\n     * Retorna un número el cual es el mayor de los tamaños de las todas las listas. \n     * @param {*} ListaPistas Lista, la cual tiene listas de pistas.\n     * @returns Mayor, siendo mayor el tamaño de la lista más grande.\n     */\n    alturaPistas(ListaPistas) {\n        let mayor = 0;  \n        for (let i = 0; i < ListaPistas.length; i++) {\n                if (ListaPistas[i].length > mayor)\n                    mayor = ListaPistas[i].length;\n        }\n        return mayor;\n    }\n\n    render() {\n        const numOfRows = this.props.grid.length;\n        const numOfCols = this.props.grid[0].length;\n        const { satisfaccionFil, satisfaccionCol } = this.props;\n        const rowClues = this.props.rowClues;\n        const colClues = this.props.colClues;\n        const clueHigh = Math.max(this. alturaPistas(rowClues) * 15, 60);//Actualiza el valor a setear en la parte grafica para que que la fila se actualice en tamaño dinamicamente.\n        const colclueHigh = Math.max(this. alturaPistas(colClues) * 25, 60);//Actualiza el valor a setear en la parte grafica para que que la columna se actualice en tamaño dinamicamente.\n\n\n\n        return (\n\n            <div className=\"vertical\">\n                <div\n                    className=\"colClues\"\n                    style={{\n                        gridTemplateRows: colclueHigh + 'px',\n                        gridTemplateColumns: '60px repeat(' + numOfCols + ', 40px)'\n                        /*\n                           60px  40px 40px 40px 40px 40px 40px 40px   (gridTemplateColumns)\n                          ______ ____ ____ ____ ____ ____ ____ ____\n                         |      |    |    |    |    |    |    |    |  60px\n                         |      |    |    |    |    |    |    |    |  (gridTemplateRows)\n                          ------ ---- ---- ---- ---- ---- ---- ---- \n                         */\n                    }}\n                >\n                    <div>{/* top-left corner square */}</div>\n                    {colClues.map((clue, i) =>\n                        <Clue clue={clue} key={i} satisface={satisfaccionCol[i]} index={i} />\n                    )}\n                </div>\n                <div className=\"horizontal\">\n                    <div\n                        className=\"rowClues\"\n                        style={{\n                            gridTemplateRows: 'repeat(' + numOfRows + ', 40px)', \n                            gridTemplateColumns:  clueHigh + 'px',\n                            /* IDEM column clues above */\n                        }}\n                    >\n                        {rowClues.map((clue, i) =>\n                            <Clue clue={clue} key={i} satisface={satisfaccionFil[i]} index={i} />\n                        )}\n                    </div>\n                    <div className=\"board\"\n                        style={{\n                            gridTemplateRows: 'repeat(' + numOfRows + ', 40px)',\n                            gridTemplateColumns: 'repeat(' + numOfCols + ', 40px)'\n                        }}>\n                        {this.props.grid.map((row, i) =>\n                            row.map((cell, j) =>\n                                <Square\n                                    value={cell}\n                                    onClick={() => this.props.onClick(i, j)}\n                                    key={i + j}\n                                />\n                            )\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Square.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Clue.js",[],{"ruleId":"64","severity":1,"message":"65","line":42,"column":60,"nodeType":"66","messageId":"67","endLine":42,"endColumn":61},{"ruleId":"68","severity":1,"message":"69","line":163,"column":5,"nodeType":"70","endLine":163,"endColumn":9},{"ruleId":"71","severity":1,"message":"72","line":26,"column":35,"nodeType":"73","messageId":"74","endLine":26,"endColumn":53,"fix":"75"},{"ruleId":"71","severity":1,"message":"72","line":27,"column":38,"nodeType":"73","messageId":"74","endLine":27,"endColumn":56,"fix":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"64","severity":1,"message":"65","line":42,"column":60,"nodeType":"66","messageId":"67","endLine":42,"endColumn":61},{"ruleId":"68","severity":1,"message":"69","line":163,"column":5,"nodeType":"70","endLine":163,"endColumn":9},{"ruleId":"71","severity":1,"message":"72","line":26,"column":35,"nodeType":"73","messageId":"74","endLine":26,"endColumn":53,"fix":"81"},{"ruleId":"71","severity":1,"message":"72","line":27,"column":38,"nodeType":"73","messageId":"74","endLine":27,"endColumn":56,"fix":"82"},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","no-whitespace-before-property","Unexpected whitespace before property alturaPistas.","MemberExpression","unexpectedWhitespace",{"range":"83","text":"84"},{"range":"85","text":"84"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],{"range":"88","text":"84"},{"range":"89","text":"84"},[956,958],".",[1142,1144],"no-global-assign","no-unsafe-negation",[931,933],[1116,1118]]