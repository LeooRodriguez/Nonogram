[{"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\index.js":"1","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Game.js":"2","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\PengineClient.js":"3","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Board.js":"4","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Square.js":"5","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Clue.js":"6"},{"size":177,"mtime":1621398463000,"results":"7","hashOfConfig":"8"},{"size":7772,"mtime":1623516662200,"results":"9","hashOfConfig":"8"},{"size":2201,"mtime":1621398463000,"results":"10","hashOfConfig":"8"},{"size":3697,"mtime":1621606873822,"results":"11","hashOfConfig":"8"},{"size":436,"mtime":1621398463000,"results":"12","hashOfConfig":"8"},{"size":450,"mtime":1621473646410,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1dyav70",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\index.js",[],["29","30"],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Game.js",["31","32"],"import React from 'react';\r\nimport PengineClient from './PengineClient';\r\nimport Board from './Board';\r\n\r\nclass Game extends React.Component {\r\n\r\n  pengine;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.restart(true)\r\n  }\r\n\r\n\r\n\r\n  handlePengineCreate() {\r\n    const queryS = 'init(PistasFilas, PistasColumns, Grilla)';\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        this.setState({\r\n          grid: response['Grilla'],\r\n          rowClues: response['PistasFilas'],\r\n          colClues: response['PistasColumns'],\r\n          satisfaccionFil: Array(response['PistasFilas'].length).fill(false), //inicializamos la fila para verificar en falso\r\n          satisfaccionCol: Array(response['PistasColumns'].length).fill(false) //inicializamos la columna para verificar en falso\r\n        });\r\n        this.cargarGrillaRes();\r\n      }\r\n      \r\n      //this.mostrarSol();\r\n    });\r\n    \r\n  }\r\n\r\n  cargarGrillaRes(){\r\n    \r\n    const PF= this.state.rowClues.length;\r\n    const PC= this.state.colClues.length;\r\n    const rowClue = JSON.stringify(this.state.rowClues);\r\n    const colClue = JSON.stringify(this.state.colClues);\r\n    const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\");\r\n    const queryX = 'resolverNonograma('+ PF + ',' + PC + ', ' + rowClue + ', ' + colClue +', GrillaSo)';\r\n    this.pengine.query(queryX, (success, response) => {\r\n      if (success) {\r\n        let GrillaSol = response['GrillaSo'];\r\n        console.log(JSON.stringify(response['GrillaSo']));\r\n        this.setState({\r\n          gridSol: GrillaSol\r\n        });\r\n        console.log(JSON.stringify(\"GrillaComun: \" +squaresS));\r\n        console.log(JSON.stringify(\"PistasF \" +rowClue));\r\n        console.log(JSON.stringify(\"PistasC \" +colClue));\r\n        console.log(JSON.stringify(\"CantF \" +PF));\r\n        console.log(JSON.stringify(\"CantC \" +PC));\r\n      } else {\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  handleClick(i, j) {\r\n    // No action on click if we are waiting.\r\n    if (this.state.waiting) {\r\n      return;\r\n    }\r\n    // Build Prolog query to make the move, which will look as follows:\r\n    // put(\"#\",[0,1],[], [],[[\"X\",_,_,_,_],[\"X\",_,\"X\",_,_],[\"X\",_,_,_,_],[\"#\",\"#\",\"#\",_,_],[_,_,\"#\",\"#\",\"#\"]], GrillaRes, FilaSat, ColSat)\r\n    const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\"); // Remove quotes for variables.\r\n    const modo = this.state.modoBoton;\r\n    const rowClue = JSON.stringify(this.state.rowClues);\r\n    const colClue = JSON.stringify(this.state.colClues);\r\n    const queryS = 'put(\"' + modo + '\", [' + i + ',' + j + ']' + ', ' + rowClue + ', ' + colClue + ',' + squaresS + ', GrillaRes, FilaSat, ColSat)';\r\n    this.setState({\r\n      waiting: true\r\n    });\r\n\r\n    this.pengine.query(queryS, (success, response) => {\r\n      if (success) {\r\n        let newGrid = response['GrillaRes'];\r\n        let satisfaceFil = response['FilaSat'];\r\n        let satisfaceCol = response['ColSat'];\r\n        this.setState({\r\n          grid: newGrid\r\n        });\r\n        this.confirmarFilaSatisfecha(i, satisfaceFil === 1);\r\n        this.confirmarColSatisfecha(j, satisfaceCol === 1);\r\n      } else {\r\n        this.setState({\r\n          waiting: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  mostrarSol(){\r\n    const G= this.state.gridSol;\r\n\r\n    for(let i=0;i<G.length;i++)\r\n      for(let j=0;j<G[0].length;j++)\r\n          console.log(JSON.stringify(G[i][j]));\r\n  }\r\n  /**\r\n   * Verifica si la columna con el indice index verifica la propiedad.\r\n   * @param {*} index es el indice de la columna que deseamos verificar \r\n   * @param {*} satisface indica si se satisfacio la columna \r\n   */\r\n  confirmarColSatisfecha(index, satisface) {\r\n    let satisfaccionCol = [...this.state.satisfaccionCol];\r\n    satisfaccionCol[index] = satisface;\r\n    this.setState({ satisfaccionCol, waiting: false });\r\n  }\r\n\r\n  /**\r\n   * Verifica si la fila con el indice index verifica la propiedad.\r\n   * @param {*} index es el indice de la fila que deseamos verificar \r\n   * @param {*} satisface indica si se satisfacio la fila\r\n   */\r\n\r\n  confirmarFilaSatisfecha(index, satisface) {\r\n    let satisfaccionFil = [...this.state.satisfaccionFil];\r\n    satisfaccionFil[index] = satisface;\r\n    this.setState({ satisfaccionFil, waiting: false });\r\n  }\r\n  /**\r\n   * Cambia el estado del boton, alternando entre el # y la X según cual sea su estado actual.\r\n   */\r\n  cambiar() {\r\n    if (this.state.modoBoton === \"#\") {\r\n      this.setState({ modoBoton: \"X\" })\r\n    }\r\n    else\r\n      this.setState({ modoBoton: \"#\" })\r\n  }\r\n\r\n  resolver(){\r\n\r\n  }\r\n\r\n  ayuda(){\r\n    \r\n  }\r\n\r\n  abrirManual() {\r\n    window.open(\"https://es.puzzle-nonograms.com/faq.php\", \"Manual de usuario / Tutorial\", \"width=800, height=700\")\r\n  }\r\n  irGithub() {\r\n    window.open(\"https://github.com/LeooRodriguez/Nonogram\", \"GitHub\", \"width=800, height=700\")\r\n  }\r\n\r\n\r\n  render() {\r\n    if (this.state.grid === null) {\r\n      return null;\r\n    }\r\n\r\n\r\n\r\n    let { satisfaccionFil, satisfaccionCol } = this.state;\r\n\r\n    if (satisfaccionFil.every(a => a) && satisfaccionCol.every(a => a)) {//Si todas las filas y columnas de la grilla son true --> ganaste el juego.\r\n      return <div>\r\n        <div className={\"cartelGanaste\"}>¡FELICIDADES,HAS GANADO!</div>\r\n\r\n        <botonesGenerales className={\"botonDeReset\"} onClick={() => this.restart()}>\r\n          Pulse para comenzar otra partida\r\n        </botonesGenerales>\r\n\r\n        <botonesGenerales className={\"botonDeGit\"} onClick={() => this.irGithub()}>\r\n          Código del nonograma (GitHub)\r\n        </botonesGenerales>\r\n      </div>\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <Board\r\n          grid={this.state.grid}\r\n          rowClues={this.state.rowClues}\r\n          colClues={this.state.colClues}\r\n          onClick={(i, j) => this.handleClick(i, j)}\r\n          satisfaccionFil={this.state.satisfaccionFil}\r\n          satisfaccionCol={this.state.satisfaccionCol}\r\n        />\r\n        <div>\r\n        <button className=\"box clue nsat\" onClick={() => this.cambiar()} >\r\n          {this.state.modoBoton}\r\n        </button>\r\n          <div className={\"cartelNombre\"}>Nonograma\r\n        </div>\r\n            <div className={\"Estado\"}>\r\n        </div>\r\n        <botonesGenerales className={\"botonReglas\"} onClick={() => this.abrirManual()}>\r\n          Reglas\r\n        </botonesGenerales>\r\n        <botonesGenerales className={\"botonDeReinicio\"} onClick={() => this.restart()}>\r\n          Reiniciar\r\n        </botonesGenerales>\r\n        <botonesGenerales className={\"botonDeResolver\"} onClick={() => this.resolver()}>\r\n          Resolver\r\n        </botonesGenerales>\r\n        \r\n      </div>\r\n      <div>\r\n      <botonesGenerales className={\"botonAyudita\"} onClick={() => this.ayuda()}>\r\n          Ayudita \r\n        </botonesGenerales>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n  restart(isFirstTime = false) {\r\n    this.state = {\r\n      grid: null,\r\n      rowClues: null,\r\n      colClues: null,\r\n      waiting: false,\r\n      satisfaccionFil: [],//Guarda verdaderos o falsos dependiendo si la filas cumple las propiedades del nonograma. \r\n      satisfaccionCol: [],//Guarda verdaderos o falsos dependiendo si la columnas cumple las propiedades del nonograma.\r\n      modoBoton: \"#\",//Verifica en que estado esta el botón ( # ó X).\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\r\n    if (isFirstTime) {\r\n      this.pengine = new PengineClient(this.handlePengineCreate);\r\n    }\r\n    else {\r\n      this.handlePengineCreate()//Inicia una nueva partida ya mismo.\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Game;\r\n\r\n\r\n","C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\PengineClient.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Board.js",[],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Square.js",[],["33","34"],"C:\\Users\\Leonardo\\Documents\\Lógica\\Nonogram\\Nonogram\\src\\Clue.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":75,"column":64,"nodeType":"41","messageId":"42","endLine":75,"endColumn":65},{"ruleId":"43","severity":1,"message":"44","line":221,"column":5,"nodeType":"45","endLine":221,"endColumn":9},{"ruleId":"35","replacedBy":"46"},{"ruleId":"37","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression",["48"],["49"],"no-global-assign","no-unsafe-negation"]